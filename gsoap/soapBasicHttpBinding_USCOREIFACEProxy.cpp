/* soapBasicHttpBinding_USCOREIFACEProxy.cpp
   Generated by gSOAP 2.8.45 for InterfaceToFace.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapBasicHttpBinding_USCOREIFACEProxy.h"

BasicHttpBinding_USCOREIFACEProxy::BasicHttpBinding_USCOREIFACEProxy() : soap(SOAP_IO_DEFAULT)
{	BasicHttpBinding_USCOREIFACEProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

BasicHttpBinding_USCOREIFACEProxy::BasicHttpBinding_USCOREIFACEProxy(const BasicHttpBinding_USCOREIFACEProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

BasicHttpBinding_USCOREIFACEProxy::BasicHttpBinding_USCOREIFACEProxy(const struct soap &_soap) : soap(_soap)
{ }

BasicHttpBinding_USCOREIFACEProxy::BasicHttpBinding_USCOREIFACEProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	BasicHttpBinding_USCOREIFACEProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

BasicHttpBinding_USCOREIFACEProxy::BasicHttpBinding_USCOREIFACEProxy(soap_mode iomode) : soap(iomode)
{	BasicHttpBinding_USCOREIFACEProxy_init(iomode, iomode);
}

BasicHttpBinding_USCOREIFACEProxy::BasicHttpBinding_USCOREIFACEProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	BasicHttpBinding_USCOREIFACEProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

BasicHttpBinding_USCOREIFACEProxy::BasicHttpBinding_USCOREIFACEProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	BasicHttpBinding_USCOREIFACEProxy_init(imode, omode);
}

BasicHttpBinding_USCOREIFACEProxy::~BasicHttpBinding_USCOREIFACEProxy()
{
	this->destroy();
	}

void BasicHttpBinding_USCOREIFACEProxy::BasicHttpBinding_USCOREIFACEProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns3", "http://schemas.microsoft.com/2003/10/Serialization/", NULL, NULL},
        {"ns1", "http://tempuri.org/", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
BasicHttpBinding_USCOREIFACEProxy *BasicHttpBinding_USCOREIFACEProxy::copy()
{	BasicHttpBinding_USCOREIFACEProxy *dup = SOAP_NEW_COPY(BasicHttpBinding_USCOREIFACEProxy(*(struct soap*)this));
	return dup;
}
#endif

BasicHttpBinding_USCOREIFACEProxy& BasicHttpBinding_USCOREIFACEProxy::operator=(const BasicHttpBinding_USCOREIFACEProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void BasicHttpBinding_USCOREIFACEProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void BasicHttpBinding_USCOREIFACEProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	BasicHttpBinding_USCOREIFACEProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void BasicHttpBinding_USCOREIFACEProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *BasicHttpBinding_USCOREIFACEProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *BasicHttpBinding_USCOREIFACEProxy::soap_fault()
{	return this->fault;
}

const char *BasicHttpBinding_USCOREIFACEProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *BasicHttpBinding_USCOREIFACEProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int BasicHttpBinding_USCOREIFACEProxy::soap_close_socket()
{	return soap_closesock(this);
}

int BasicHttpBinding_USCOREIFACEProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void BasicHttpBinding_USCOREIFACEProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void BasicHttpBinding_USCOREIFACEProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *BasicHttpBinding_USCOREIFACEProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int BasicHttpBinding_USCOREIFACEProxy::FaceService(const char *endpoint, const char *soap_action, _ns1__FaceService *ns1__FaceService, _ns1__FaceServiceResponse &ns1__FaceServiceResponse)
{	struct soap *soap = this;
	struct __ns1__FaceService soap_tmp___ns1__FaceService;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.156:6666/FACE";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IFACE/FaceService";
	soap_tmp___ns1__FaceService.ns1__FaceService = ns1__FaceService;
	soap_begin(soap);
	soap_set_version(soap, 1); /* SOAP1.1 */
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__FaceService(soap, &soap_tmp___ns1__FaceService);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FaceService(soap, &soap_tmp___ns1__FaceService, "-ns1:FaceService", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FaceService(soap, &soap_tmp___ns1__FaceService, "-ns1:FaceService", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__FaceServiceResponse*>(&ns1__FaceServiceResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__FaceServiceResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FaceServiceResponse.soap_get(soap, "ns1:FaceServiceResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
